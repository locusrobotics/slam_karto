/***************************************************************************
 * Copyright (C) 2017 Locus Robotics. All rights reserved.
 * Unauthorized copying of this file, via any medium, is strictly prohibited
 * Proprietary and confidential
 ***************************************************************************/

#ifndef SLAM_KARTO_MAP_ALIGNMENT_TOOL_H
#define SLAM_KARTO_MAP_ALIGNMENT_TOOL_H

#include <interactive_markers/interactive_marker_server.h>
#include <interactive_markers/menu_handler.h>
#include <ros/ros.h>
#include <tf2_ros/static_transform_broadcaster.h>

#include <string>

namespace slam_karto
{

/**
 * This class creates an interactive marker to help align the maps generated by slam_karto. Two alignment endpoints
 * are created with an arrow between them. The user can move the endpoints to align the arrow with a horizontal edge
 * in the map. When the user clicks 'Align Map', a transform is publishd such that the arrow drawn in the 'map' frame
 * will become aligned with the X-axis of the 'aligned' frame. slam_karto has been modified to check for this transform
 * and render the map in the 'aligned' frame instead of the 'map' frame. Thus, this is not simply a rotation of the map;
 * the map is generated in a different frame. This prevents aliasing and interpolation errors that would occur if the
 * image was simply rotated.
 */
class MapAlignmentTool
{
public:
  /**
   * Constructor
   */
  explicit MapAlignmentTool(
    const ros::NodeHandle& node_handle = ros::NodeHandle(),
    const ros::NodeHandle& private_node_handle = ros::NodeHandle("~"));

  /**
   * Destructor
   */
  virtual ~MapAlignmentTool();

protected:
  ros::NodeHandle node_handle_;  //!< Node handle for this node
  tf2_ros::StaticTransformBroadcaster static_broadcaster_;  //!< Broadcasts the static aligned->map transform
  interactive_markers::InteractiveMarkerServer interactive_marker_server_;  //!< Server for interactive markers
  interactive_markers::MenuHandler menu_handler_;  //!< Interactive marker menu handler
  std::string aligned_frame_;  //!< The name of the 'aligned' frame
  std::string map_frame_;  //!< The name of the 'map' frame

  /**
   * @brief Create an interactive marker message for one of the two alignment tool endpoints
   *
   * This leaves the marker pose at the default value, the origin. It is likely the pose needs to be updated after the
   * marker is created.
   * @param  name The name to assign the interactive marker
   * @return      A populated interactive marker message
   */
  visualization_msgs::InteractiveMarker createEndpoint(const std::string& name) const;

  /**
   * @brief Create an interactive marker message for the connector arrow between the two alignment tool endpoints
   *
   * This leaves the two arrow endpoints at the default value, the origin. It is likely the two points will need
   * to be updated after the marker is created.
   * @param  name The name to assign the interactive marker
   * @return      A populated interactive marker message
   */
  visualization_msgs::InteractiveMarker createConnector(const std::string& name) const;

  /**
   * @brief Callback function executed in response to the user moving one of the two alignment tool endpoints.
   *
   * This callback updates the connector arrow to track the movement of the alignment tool endpoints.
   * @param feedback The interactive marker feedback message
   */
  void endpointCallback(const visualization_msgs::InteractiveMarkerFeedbackConstPtr& feedback);

  /**
   * @brief Callback function executed in response to the user selecting the "Align Map" menu option.
   *
   * This callback computes the angle between the two alignment tool endpoints and publishes a static transform
   * between the 'aligned' frame and the 'map' frame such that the alignment arrow drawn in the 'map' frame will
   * align with the X-axis in the 'aligned' frame.
   * @param feedback The interactive marker feedback message
   */
  void alignMapCallback(const visualization_msgs::InteractiveMarkerFeedbackConstPtr& feedback);
};  // MapAlignmentTool

}  // namespace slam_karto

#endif  // SLAM_KARTO_MAP_ALIGNMENT_TOOL_H
